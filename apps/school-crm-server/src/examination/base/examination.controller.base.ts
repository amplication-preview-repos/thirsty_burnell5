/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExaminationService } from "../examination.service";
import { ExaminationCreateInput } from "./ExaminationCreateInput";
import { Examination } from "./Examination";
import { ExaminationFindManyArgs } from "./ExaminationFindManyArgs";
import { ExaminationWhereUniqueInput } from "./ExaminationWhereUniqueInput";
import { ExaminationUpdateInput } from "./ExaminationUpdateInput";

export class ExaminationControllerBase {
  constructor(protected readonly service: ExaminationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Examination })
  async createExamination(
    @common.Body() data: ExaminationCreateInput
  ): Promise<Examination> {
    return await this.service.createExamination({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Examination] })
  @ApiNestedQuery(ExaminationFindManyArgs)
  async examinations(@common.Req() request: Request): Promise<Examination[]> {
    const args = plainToClass(ExaminationFindManyArgs, request.query);
    return this.service.examinations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Examination })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async examination(
    @common.Param() params: ExaminationWhereUniqueInput
  ): Promise<Examination | null> {
    const result = await this.service.examination({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Examination })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExamination(
    @common.Param() params: ExaminationWhereUniqueInput,
    @common.Body() data: ExaminationUpdateInput
  ): Promise<Examination | null> {
    try {
      return await this.service.updateExamination({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Examination })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExamination(
    @common.Param() params: ExaminationWhereUniqueInput
  ): Promise<Examination | null> {
    try {
      return await this.service.deleteExamination({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
