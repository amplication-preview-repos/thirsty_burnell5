/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Examination as PrismaExamination } from "@prisma/client";

export class ExaminationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExaminationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.examination.count(args);
  }

  async examinations<T extends Prisma.ExaminationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExaminationFindManyArgs>
  ): Promise<PrismaExamination[]> {
    return this.prisma.examination.findMany<Prisma.ExaminationFindManyArgs>(
      args
    );
  }
  async examination<T extends Prisma.ExaminationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExaminationFindUniqueArgs>
  ): Promise<PrismaExamination | null> {
    return this.prisma.examination.findUnique(args);
  }
  async createExamination<T extends Prisma.ExaminationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExaminationCreateArgs>
  ): Promise<PrismaExamination> {
    return this.prisma.examination.create<T>(args);
  }
  async updateExamination<T extends Prisma.ExaminationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExaminationUpdateArgs>
  ): Promise<PrismaExamination> {
    return this.prisma.examination.update<T>(args);
  }
  async deleteExamination<T extends Prisma.ExaminationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExaminationDeleteArgs>
  ): Promise<PrismaExamination> {
    return this.prisma.examination.delete(args);
  }
}
