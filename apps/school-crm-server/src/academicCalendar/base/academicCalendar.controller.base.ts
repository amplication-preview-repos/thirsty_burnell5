/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AcademicCalendarService } from "../academicCalendar.service";
import { AcademicCalendarCreateInput } from "./AcademicCalendarCreateInput";
import { AcademicCalendar } from "./AcademicCalendar";
import { AcademicCalendarFindManyArgs } from "./AcademicCalendarFindManyArgs";
import { AcademicCalendarWhereUniqueInput } from "./AcademicCalendarWhereUniqueInput";
import { AcademicCalendarUpdateInput } from "./AcademicCalendarUpdateInput";

export class AcademicCalendarControllerBase {
  constructor(protected readonly service: AcademicCalendarService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AcademicCalendar })
  async createAcademicCalendar(
    @common.Body() data: AcademicCalendarCreateInput
  ): Promise<AcademicCalendar> {
    return await this.service.createAcademicCalendar({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AcademicCalendar] })
  @ApiNestedQuery(AcademicCalendarFindManyArgs)
  async academicCalendars(
    @common.Req() request: Request
  ): Promise<AcademicCalendar[]> {
    const args = plainToClass(AcademicCalendarFindManyArgs, request.query);
    return this.service.academicCalendars({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AcademicCalendar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async academicCalendar(
    @common.Param() params: AcademicCalendarWhereUniqueInput
  ): Promise<AcademicCalendar | null> {
    const result = await this.service.academicCalendar({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AcademicCalendar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAcademicCalendar(
    @common.Param() params: AcademicCalendarWhereUniqueInput,
    @common.Body() data: AcademicCalendarUpdateInput
  ): Promise<AcademicCalendar | null> {
    try {
      return await this.service.updateAcademicCalendar({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AcademicCalendar })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAcademicCalendar(
    @common.Param() params: AcademicCalendarWhereUniqueInput
  ): Promise<AcademicCalendar | null> {
    try {
      return await this.service.deleteAcademicCalendar({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
