/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AcademicCalendar as PrismaAcademicCalendar,
} from "@prisma/client";

export class AcademicCalendarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AcademicCalendarCountArgs, "select">
  ): Promise<number> {
    return this.prisma.academicCalendar.count(args);
  }

  async academicCalendars<T extends Prisma.AcademicCalendarFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicCalendarFindManyArgs>
  ): Promise<PrismaAcademicCalendar[]> {
    return this.prisma.academicCalendar.findMany<Prisma.AcademicCalendarFindManyArgs>(
      args
    );
  }
  async academicCalendar<T extends Prisma.AcademicCalendarFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicCalendarFindUniqueArgs>
  ): Promise<PrismaAcademicCalendar | null> {
    return this.prisma.academicCalendar.findUnique(args);
  }
  async createAcademicCalendar<T extends Prisma.AcademicCalendarCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicCalendarCreateArgs>
  ): Promise<PrismaAcademicCalendar> {
    return this.prisma.academicCalendar.create<T>(args);
  }
  async updateAcademicCalendar<T extends Prisma.AcademicCalendarUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicCalendarUpdateArgs>
  ): Promise<PrismaAcademicCalendar> {
    return this.prisma.academicCalendar.update<T>(args);
  }
  async deleteAcademicCalendar<T extends Prisma.AcademicCalendarDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AcademicCalendarDeleteArgs>
  ): Promise<PrismaAcademicCalendar> {
    return this.prisma.academicCalendar.delete(args);
  }
}
