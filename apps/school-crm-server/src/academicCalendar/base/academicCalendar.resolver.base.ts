/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AcademicCalendar } from "./AcademicCalendar";
import { AcademicCalendarCountArgs } from "./AcademicCalendarCountArgs";
import { AcademicCalendarFindManyArgs } from "./AcademicCalendarFindManyArgs";
import { AcademicCalendarFindUniqueArgs } from "./AcademicCalendarFindUniqueArgs";
import { DeleteAcademicCalendarArgs } from "./DeleteAcademicCalendarArgs";
import { AcademicCalendarService } from "../academicCalendar.service";
@graphql.Resolver(() => AcademicCalendar)
export class AcademicCalendarResolverBase {
  constructor(protected readonly service: AcademicCalendarService) {}

  async _academicCalendarsMeta(
    @graphql.Args() args: AcademicCalendarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AcademicCalendar])
  async academicCalendars(
    @graphql.Args() args: AcademicCalendarFindManyArgs
  ): Promise<AcademicCalendar[]> {
    return this.service.academicCalendars(args);
  }

  @graphql.Query(() => AcademicCalendar, { nullable: true })
  async academicCalendar(
    @graphql.Args() args: AcademicCalendarFindUniqueArgs
  ): Promise<AcademicCalendar | null> {
    const result = await this.service.academicCalendar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AcademicCalendar)
  async deleteAcademicCalendar(
    @graphql.Args() args: DeleteAcademicCalendarArgs
  ): Promise<AcademicCalendar | null> {
    try {
      return await this.service.deleteAcademicCalendar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
