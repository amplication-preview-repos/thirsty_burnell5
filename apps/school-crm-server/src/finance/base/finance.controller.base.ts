/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinanceService } from "../finance.service";
import { FinanceCreateInput } from "./FinanceCreateInput";
import { Finance } from "./Finance";
import { FinanceFindManyArgs } from "./FinanceFindManyArgs";
import { FinanceWhereUniqueInput } from "./FinanceWhereUniqueInput";
import { FinanceUpdateInput } from "./FinanceUpdateInput";

export class FinanceControllerBase {
  constructor(protected readonly service: FinanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Finance })
  async createFinance(
    @common.Body() data: FinanceCreateInput
  ): Promise<Finance> {
    return await this.service.createFinance({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Finance] })
  @ApiNestedQuery(FinanceFindManyArgs)
  async finances(@common.Req() request: Request): Promise<Finance[]> {
    const args = plainToClass(FinanceFindManyArgs, request.query);
    return this.service.finances({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Finance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async finance(
    @common.Param() params: FinanceWhereUniqueInput
  ): Promise<Finance | null> {
    const result = await this.service.finance({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Finance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinance(
    @common.Param() params: FinanceWhereUniqueInput,
    @common.Body() data: FinanceUpdateInput
  ): Promise<Finance | null> {
    try {
      return await this.service.updateFinance({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Finance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinance(
    @common.Param() params: FinanceWhereUniqueInput
  ): Promise<Finance | null> {
    try {
      return await this.service.deleteFinance({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
